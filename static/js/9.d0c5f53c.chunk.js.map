{"version":3,"sources":["graphs/UserPlotly.js","pages/Projects/index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","UserPlotly","xAxis","projectionLower","projection","projectionUpper","stockSym","globalQuote","classes","className","variant","elevation","data","x","y","type","name","line","width","layout","title","margin","t","l","r","b","showlegend","autosize","useResizeHandler","style","height","display","flex","container","item","xs","sm","parseFloat","toFixed","Projects","useState","tab","setTab","userProjects","intl","useIntl","pageTitle","formatMessage","id","defaultMessage","tabs","position","value","scrollButtons","aria-label","centered","length","map","project","console","log","description","onClick","label","filter","proj","graphs","reverse","graph","split","error","renderUserProjects"],"mappings":"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","file":"static/js/9.d0c5f53c.chunk.js","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function UserPlotly({\n  xAxis,\n  projectionLower,\n  projection,\n  projectionUpper,\n  stockSym,\n  globalQuote,\n}) {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.paper} variant='outlined' elevation={4}>\n      <Card>\n        <CardActionArea>\n          <Plot\n            data={[\n              {\n                x: xAxis,\n                y: projectionUpper,\n                type: \"lines+markers\",\n                name: \"Projection upper\",\n                line: {\n                  color: \"rgb(0, 255, 0)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projection,\n                type: \"lines+markers\",\n                name: \"Projection\",\n                line: {\n                  color: \"rgb(0, 0, 255)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projectionLower,\n                type: \"lines+markers\",\n                name: \"Projection lower\",\n                line: {\n                  color: \"rgb(255, 0, 0)\",\n                  width: 2,\n                },\n              },\n            ]}\n            layout={{\n              title: stockSym,\n              margin: { t: 75, l: 40, r: 20, b: 40 },\n              showlegend: false,\n              autosize: true,\n              useResizeHandler: true,\n            }}\n            style={{ width: \"100%\", height: \"100%\", display: \"flex\", flex: 1 }}\n          />\n          <CardContent>\n            {globalQuote[\"Global Quote\"] ? (\n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Open: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"02. open\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>High: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"03. high\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Low: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"04. low\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Price: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"05. price\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Volume: </strong>\n                  {globalQuote[\"Global Quote\"][\"06. volume\"]}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Previous Close: </strong>\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"08. previous close\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change $: </strong>{\" \"}\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"09. change\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change %: </strong>\n                  {globalQuote[\"Global Quote\"][\"10. change percent\"]}\n                </Grid>\n              </Grid>\n            ) : null}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Paper>\n  );\n}\n","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Page from \"material-ui-shell/lib/containers/Page\";\r\nimport React, { useState } from \"react\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport { useIntl } from \"react-intl\";\r\nimport UserPlotly from \"graphs/UserPlotly\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst Projects = () => {\r\n  const [tab, setTab] = useState(40);\r\n  const [userProjects, setUserProjects] = useState([]);\r\n  const intl = useIntl();\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"http://127.0.0.1:3000/projects/\")\r\n  //     .then(response => response.json())\r\n  //     .then(userProj => setUserProjects(userProj))\r\n  //     .then(() => {\r\n  //       if (!userProjects.length) {\r\n  //         console.error(\"no user project length\");\r\n  //       } else {\r\n  //         setTab(userProjects[0][\"id\"]);\r\n  //       }\r\n  //     });\r\n  // }, [userProjects]);\r\n\r\n  const renderUserProjects = () => {\r\n    if (!userProjects.length) {\r\n      console.error(\"no user project length\");\r\n    } else {\r\n      const foundProjects = userProjects.filter(project => project.id === tab);\r\n      return foundProjects.map(proj => {\r\n        proj.graphs.reverse();\r\n        return proj.graphs.map(graph => {\r\n          return (\r\n            <UserPlotly\r\n              xAxis={graph[\"x_axis_array\"].split(\",\")}\r\n              projectionLower={graph[\"proj_low_array\"].split(\",\")}\r\n              projection={graph[\"proj_array\"].split(\",\")}\r\n              projectionUpper={graph[\"proj_high_array\"].split(\",\")}\r\n              stockSym={graph[\"stock_sym\"]}\r\n              globalQuote={{}}\r\n            />\r\n          );\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page\r\n      pageTitle={intl.formatMessage({\r\n        id: \"tabs_demo\",\r\n        defaultMessage: \"Existing Cast Projects\",\r\n      })}\r\n      tabs={\r\n        <AppBar position='static'>\r\n          <Tabs\r\n            value={tab}\r\n            variant='scrollable'\r\n            scrollButtons='auto'\r\n            aria-label='scrollable auto tabs example'\r\n            centered\r\n          >\r\n            {userProjects.length ? (\r\n              userProjects.map(project => {\r\n                console.log(project);\r\n                return (\r\n                  <Tooltip\r\n                    title={project.description}\r\n                    aria-label={project.description}\r\n                  >\r\n                    <Tab\r\n                      onClick={() => setTab(project.id)}\r\n                      label={project.name}\r\n                      value={project.id}\r\n                    />\r\n                  </Tooltip>\r\n                );\r\n              })\r\n            ) : (\r\n              <Tab label='Create New Project' value='A' />\r\n            )}\r\n          </Tabs>\r\n        </AppBar>\r\n      }\r\n    >\r\n      <div>\r\n        {renderUserProjects()}\r\n        {userProjects.length ? null : ( // userProjects.filter(project => tab === project.id)\r\n          <div>\"Create new Project\"</div>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\nexport default Projects;\r\n"],"sourceRoot":""}