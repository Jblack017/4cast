{"version":3,"sources":["graphs/UserPlotly.js","pages/StockCast/StockCast.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","UserPlotly","xAxis","projectionLower","projection","projectionUpper","stockSym","globalQuote","classes","className","variant","elevation","data","x","y","type","name","line","width","layout","title","margin","t","l","r","b","showlegend","autosize","useResizeHandler","style","height","display","flex","container","item","xs","sm","parseFloat","toFixed","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","backgroundColor","primary","light","secondaryHeading","icon","verticalAlign","details","alignItems","flexDirection","justifyContent","column","flexBasis","helper","borderLeft","divider","link","main","textDecoration","scrollbar","textField","button","saveProp","grid","gridItem","saveText","StockCast","intl","useIntl","useState","stockSymbol","setStockSymbol","setXAxis","setProjectionLower","setProjection","setProjectionUpper","loading","setLoading","setGlobalQuote","loadingMessage","setLoadingMessage","projectName","setProjectName","projectDescription","setProjectDescription","baseURL","apiKey","handleSubmit","event","preventDefault","fetchStockData","console","log","fetch","then","response","json","stockObj","parseStockObj","stockData","fetchFourCast","property","record","push","unshift","stockObject","method","headers","body","JSON","stringify","forecast","parseForecast","csv","parse","err","error","xAxisValues","projLower","projected","projUpper","shift","forEach","row","pageTitle","formatMessage","id","defaultMessage","size","onClick","defaultExpanded","expandIcon","aria-controls","label","value","onChange","e","target","multiline","rowsMax","noValidate","autoComplete","onSubmit","required"],"mappings":"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","file":"static/js/7.81e44d09.chunk.js","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function UserPlotly({\n  xAxis,\n  projectionLower,\n  projection,\n  projectionUpper,\n  stockSym,\n  globalQuote,\n}) {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.paper} variant='outlined' elevation={4}>\n      <Card>\n        <CardActionArea>\n          <Plot\n            data={[\n              {\n                x: xAxis,\n                y: projectionUpper,\n                type: \"lines+markers\",\n                name: \"Projection upper\",\n                line: {\n                  color: \"rgb(0, 255, 0)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projection,\n                type: \"lines+markers\",\n                name: \"Projection\",\n                line: {\n                  color: \"rgb(0, 0, 255)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projectionLower,\n                type: \"lines+markers\",\n                name: \"Projection lower\",\n                line: {\n                  color: \"rgb(255, 0, 0)\",\n                  width: 2,\n                },\n              },\n            ]}\n            layout={{\n              title: stockSym,\n              margin: { t: 75, l: 40, r: 20, b: 40 },\n              showlegend: false,\n              autosize: true,\n              useResizeHandler: true,\n            }}\n            style={{ width: \"100%\", height: \"100%\", display: \"flex\", flex: 1 }}\n          />\n          <CardContent>\n            {globalQuote[\"Global Quote\"] ? (\n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Open: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"02. open\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>High: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"03. high\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Low: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"04. low\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Price: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"05. price\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Volume: </strong>\n                  {globalQuote[\"Global Quote\"][\"06. volume\"]}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Previous Close: </strong>\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"08. previous close\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change $: </strong>{\" \"}\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"09. change\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change %: </strong>\n                  {globalQuote[\"Global Quote\"][\"10. change percent\"]}\n                </Grid>\n              </Grid>\n            ) : null}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Paper>\n  );\n}\n","import Page from \"material-ui-shell/lib/containers/Page\";\r\nimport React, { useState } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Scrollbar from \"material-ui-shell/lib/components/Scrollbar/Scrollbar\";\r\nimport UserPlotly from \"graphs/UserPlotly\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport csv from \"csv\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionActions from \"@material-ui/core/AccordionActions\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// import Chip from \"@material-ui/core/Chip\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// import { useEffect } from \"react\";\r\n// import Avatar from \"@material-ui/core/Avatar\";\r\n// import DoneIcon from \"@material-ui/icons/Done\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    backgroundColor: theme.palette.primary.light,\r\n    fontSize: \"2.7em\",\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.secondary.light,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    height: `100%`,\r\n  },\r\n  column: {\r\n    flexBasis: \"100%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  scrollbar: { height: \"70%\", width: \"70%\", display: \"flex\", flex: 1 },\r\n  textField: { margin: theme.spacing(2) },\r\n  button: { margin: theme.spacing(2) },\r\n  saveProp: {\r\n    margin: theme.spacing(2),\r\n    flexGrow: 1,\r\n  },\r\n  grid: { width: \"100%\" },\r\n  gridItem: { flex: 1, flexGrow: 1 },\r\n  saveText: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nconst StockCast = () => {\r\n  const intl = useIntl();\r\n  const classes = useStyles();\r\n  const [stockSymbol, setStockSymbol] = useState(\"TSLA\");\r\n  const [xAxis, setXAxis] = useState(null);\r\n  const [projectionLower, setProjectionLower] = useState(null);\r\n  const [projection, setProjection] = useState(null);\r\n  const [projectionUpper, setProjectionUpper] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [globalQuote, setGlobalQuote] = useState({});\r\n  const [loadingMessage, setLoadingMessage] = useState(\r\n    \"Search a ticker symbol above\"\r\n  );\r\n  // const [projects, setProjects] = useState([]);\r\n  // const [project, setProject] = useState({});\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [projectDescription, setProjectDescription] = useState(\"\");\r\n\r\n  const baseURL = \"https://www.alphavantage.co/query?\";\r\n  const intraDayTS = \"function=TIME_SERIES_DAILY_ADJUSTED&symbol=\";\r\n  const globalQuoteURL = \"function=GLOBAL_QUOTE&symbol=\";\r\n  const outputSize = \"&outputsize=full\";\r\n  const apiKey = \"&apikey=N1URRPJ42UJODY8Y\";\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    setLoadingMessage(`Pulling ${stockSymbol} from Alpha Vantage`);\r\n    fetchStockData();\r\n  };\r\n\r\n  const fetchStockData = () => {\r\n    console.log();\r\n    fetch(baseURL + intraDayTS + stockSymbol + outputSize + apiKey)\r\n      .then(response => response.json())\r\n      .then(stockObj => parseStockObj(stockObj[\"Time Series (Daily)\"]))\r\n      .then(stockData => fetchFourCast(stockData))\r\n      .then(\r\n        fetch(baseURL + globalQuoteURL + stockSymbol + apiKey)\r\n          .then(response => response.json())\r\n          .then(setGlobalQuote)\r\n      );\r\n  };\r\n\r\n  const parseStockObj = stockObj => {\r\n    let stockData = [];\r\n    setLoadingMessage(`Parsing ${stockSymbol}`);\r\n    for (let property in stockObj) {\r\n      const record = [property, parseFloat(stockObj[property][\"1. open\"])];\r\n      stockData.push(record);\r\n    }\r\n    stockData.unshift([\"Date\", \"Open\"]);\r\n    return stockData;\r\n  };\r\n\r\n  const fetchFourCast = stockData => {\r\n    const stockObject = { data: stockData };\r\n    setLoadingMessage(`Waiting on ${stockSymbol} 90 Day Forecast`);\r\n    fetch(\"https://four-cast-app.herokuapp.com/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(stockObject),\r\n    })\r\n      .then(response => response.json())\r\n      .then(forecast => parseForecast(forecast));\r\n  };\r\n\r\n  const parseForecast = forecast => {\r\n    csv.parse(forecast.data, (err, data) => {\r\n      if (!err) {\r\n        let xAxisValues = [];\r\n        let projLower = [];\r\n        let projected = [];\r\n        let projUpper = [];\r\n        data.shift();\r\n        data.forEach(row => {\r\n          if (row) {\r\n            xAxisValues.push(row[1]);\r\n            projected.push(parseFloat(row[2]).toFixed(2));\r\n            projLower.push(parseFloat(row[3]).toFixed(2));\r\n            projUpper.push(parseFloat(row[4]).toFixed(2));\r\n          }\r\n        });\r\n        setXAxis(xAxisValues);\r\n        setProjection(projected);\r\n        setProjectionLower(projLower);\r\n        setProjectionUpper(projUpper);\r\n        setLoadingMessage(`${stockSymbol} loaded`);\r\n        setProjectName(stockSymbol);\r\n        setLoading(false);\r\n      } else {\r\n        console.error(err);\r\n        setLoading(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSaveNew = () => {\r\n    // let projectObject = {\r\n    //   project: {\r\n    //     name: projectName,\r\n    //     description: projectDescription,\r\n    //     graph: {\r\n    //       stock_sym: `${stockSymbol.toString().toUpperCase()} Casted ${Date()\r\n    //         .split(\" \")\r\n    //         .slice(0, 5)\r\n    //         .join(\" \")}`,\r\n    //       x_axis_array: xAxis.toString(),\r\n    //       proj_low_array: projectionLower.toString(),\r\n    //       proj_high_array: projection.toString(),\r\n    //       proj_array: projectionUpper.toString(),\r\n    //     },\r\n    //   },\r\n    // };\r\n    // fetch(\"http://localhost:3000/projects/\", {\r\n    //   method: \"POST\",\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //   },\r\n    //   body: JSON.stringify(projectObject),\r\n    // })\r\n    //   .then(response => response.json())\r\n    //   .then(window.alert(`${stockSymbol} has been saved to ${projectName}`));\r\n  };\r\n\r\n  const handleSaveExisting = () => {\r\n    // let stockObject = {\r\n    //   project: project.id,\r\n    //   stock_sym: `${stockSymbol.toString().toUpperCase()} Casted ${Date()\r\n    //     .split(\" \")\r\n    //     .slice(0, 5)\r\n    //     .join(\" \")}`,\r\n    //   x_axis_array: xAxis.toString(),\r\n    //   proj_low_array: projectionLower.toString(),\r\n    //   proj_high_array: projection.toString(),\r\n    //   proj_array: projectionUpper.toString(),\r\n    // };\r\n    // fetch(\"http://localhost:3000/graphs/\", {\r\n    //   method: \"POST\",\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //   },\r\n    //   body: JSON.stringify(stockObject),\r\n    // })\r\n    //   .then(response => response.json())\r\n    //   .then(window.alert(`${stockSymbol} has been saved to ${project.name}`));\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"http://127.0.0.1:3000/projects/\")\r\n  //     .then(response => response.json())\r\n  //     .then(setProjects);\r\n  // }, []);\r\n\r\n  // const renderProjectChips = () => {\r\n  //   return projects.map(project => {\r\n  //     return (\r\n  //       <Chip\r\n  //         color='primary'\r\n  //         size='medium'\r\n  //         label={project.name}\r\n  //         deleteIcon={<DoneIcon />}\r\n  //         onClick={() => (setProject(project))}\r\n  //         avatar={<Avatar>{project.id}</Avatar>}\r\n  //       />\r\n  //     );\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <Page\r\n      pageTitle={intl.formatMessage({\r\n        id: \"cast_stock\",\r\n        defaultMessage: \"Cast Stock\",\r\n      })}\r\n    >\r\n      <Scrollbar className={classes.scrollbar}>\r\n        <Grid container spacing={1} className={classes.grid}>\r\n          {!xAxis ? (\r\n            <>\r\n              <Grid item xs={4} sm={4}>\r\n                <form\r\n                  className={classes.textField}\r\n                  noValidate\r\n                  autoComplete='off'\r\n                  onSubmit={handleSubmit}\r\n                >\r\n                  <TextField\r\n                    id='stock'\r\n                    label='Required'\r\n                    variant='filled'\r\n                    value={stockSymbol}\r\n                    onChange={event => setStockSymbol(event.target.value)}\r\n                    required={true}\r\n                    type='text'\r\n                  />\r\n                </form>\r\n              </Grid>\r\n              <Grid item xs={4} sm={4}>\r\n                <Button\r\n                  className={classes.button}\r\n                  size='large'\r\n                  variant='contained'\r\n                  color='secondary'\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Cast\r\n                </Button>\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Grid item className={classes.gridItem}>\r\n                <Button\r\n                  className={classes.button}\r\n                  size='large'\r\n                  variant='contained'\r\n                  color='secondary'\r\n                  onClick={() => {\r\n                    setXAxis(null);\r\n                    setLoadingMessage(\"Let's Try Another One!\");\r\n                  }}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              </Grid>\r\n              <Grid item className={classes.gridItem}>\r\n                <Paper className={classes.saveProp}>\r\n                  <Accordion defaultExpanded={false}>\r\n                    <AccordionSummary\r\n                      className={classes.saveText}\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls='panel1c-content'\r\n                      id='panel1c-header'\r\n                    >\r\n                      Save to New\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.details}>\r\n                      <div className={classes.column} />\r\n                      <TextField\r\n                        id='standard-basic'\r\n                        label='Name Project'\r\n                        value={projectName}\r\n                        onChange={e => setProjectName(e.target.value)}\r\n                      />\r\n                      <br></br>\r\n                      <TextField\r\n                        id='outlined-multiline-flexible'\r\n                        label='Describe Project'\r\n                        multiline\r\n                        rowsMax={4}\r\n                        value={projectDescription}\r\n                        onChange={e => setProjectDescription(e.target.value)}\r\n                        variant='outlined'\r\n                      />\r\n                    </AccordionDetails>\r\n                    <Divider />\r\n                    <AccordionActions>\r\n                      <Button\r\n                        size='small'\r\n                        color='primary'\r\n                        onClick={() => handleSaveNew()}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </AccordionActions>\r\n                  </Accordion>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item className={classes.gridItem}>\r\n                <Paper className={classes.saveProp}>\r\n                  <Accordion defaultExpanded={false}>\r\n                    <AccordionSummary\r\n                      className={classes.saveText}\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls='panel1c-content'\r\n                      id='panel1c-header'\r\n                    >\r\n                      Save to Existing\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.details}>\r\n                      <div className={classes.column} />\r\n                      <div className={classes.column}>\r\n                        {/* {renderProjectChips()} */}\r\n                      </div>\r\n                    </AccordionDetails>\r\n                    <Divider />\r\n                    <AccordionActions>\r\n                      <Button\r\n                        size='small'\r\n                        color='primary'\r\n                        onClick={() => handleSaveExisting()}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </AccordionActions>\r\n                  </Accordion>\r\n                </Paper>\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid item xs={12} sm={12}>\r\n            <Paper className={classes.paper}>\r\n              {xAxis ? (\r\n                <UserPlotly\r\n                  xAxis={xAxis}\r\n                  projectionLower={projectionLower}\r\n                  projection={projection}\r\n                  projectionUpper={projectionUpper}\r\n                  stockSym={stockSymbol}\r\n                  globalQuote={globalQuote}\r\n                />\r\n              ) : (\r\n                loadingMessage\r\n              )}\r\n            </Paper>\r\n            {loading ? <Skeleton variant='rect' height={500} /> : null}\r\n          </Grid>\r\n        </Grid>\r\n      </Scrollbar>\r\n    </Page>\r\n  );\r\n};\r\nexport default StockCast;\r\n"],"sourceRoot":""}