{"version":3,"sources":["graphs/UserPlotly.js","pages/CsvCast/CsvCast.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","UserPlotly","xAxis","projectionLower","projection","projectionUpper","stockSym","globalQuote","classes","className","variant","elevation","data","x","y","type","name","line","width","layout","title","margin","t","l","r","b","showlegend","autosize","useResizeHandler","style","height","display","flex","container","item","xs","sm","parseFloat","toFixed","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","backgroundColor","primary","light","secondaryHeading","icon","verticalAlign","details","alignItems","flexDirection","justifyContent","column","flexBasis","helper","borderLeft","divider","link","main","textDecoration","scrollbar","textField","button","CsvCast","intl","useIntl","useState","setXAxis","setProjectionLower","setProjection","setProjectionUpper","loading","setLoading","loadingMessage","setLoadingMessage","fileName","setFileName","projects","setProjects","project","setProject","projectName","setProjectName","projectDescription","setProjectDescription","onDrop","useCallback","acceptedFile","reader","FileReader","split","Date","slice","join","readAsText","onload","csv","parse","result","err","console","error","fetch","method","headers","body","JSON","stringify","then","response","json","forecast","xAxisValues","projLower","projected","projUpper","shift","forEach","row","push","catch","promiseError","thinkalatorIO","useDropzone","getRootProps","getInputProps","isDragActive","useEffect","pageTitle","formatMessage","id","defaultMessage","justify","grid","size","onClick","window","location","reload","defaultExpanded","expandIcon","aria-controls","label","value","onChange","e","target","multiline","rowsMax","projectObject","description","graph","stock_sym","toString","toUpperCase","x_axis_array","proj_low_array","proj_high_array","proj_array","alert","handleSaveNew","map","deleteIcon","onDelete","avatar","stockObject","handleSaveExisting","lg"],"mappings":"iGAAA,0HASMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAIf,SAASC,EAAT,GAOX,IANFC,EAMC,EANDA,MACAC,EAKC,EALDA,gBACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,gBACAC,EAEC,EAFDA,SACAC,EACC,EADDA,YAEMC,EAAUpB,IAEhB,OACE,cAAC,IAAD,CAAOqB,UAAWD,EAAQf,MAAOiB,QAAQ,WAAWC,UAAW,EAA/D,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAM,CACJ,CACEC,EAAGX,EACHY,EAAGT,EACHU,KAAM,gBACNC,KAAM,mBACNC,KAAM,CACJpB,MAAO,iBACPqB,MAAO,IAGX,CACEL,EAAGX,EACHY,EAAGV,EACHW,KAAM,gBACNC,KAAM,aACNC,KAAM,CACJpB,MAAO,iBACPqB,MAAO,IAGX,CACEL,EAAGX,EACHY,EAAGX,EACHY,KAAM,gBACNC,KAAM,mBACNC,KAAM,CACJpB,MAAO,iBACPqB,MAAO,KAIbC,OAAQ,CACNC,MAAOd,EACPe,OAAQ,CAAEC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IAClCC,YAAY,EACZC,UAAU,EACVC,kBAAkB,GAEpBC,MAAO,CAAEX,MAAO,OAAQY,OAAQ,OAAQC,QAAS,OAAQC,KAAM,KAEjE,cAAC,IAAD,UACGzB,EAAY,gBACX,eAAC,IAAD,CAAM0B,WAAS,EAACtC,QAAS,EAAzB,UACE,eAAC,IAAD,CAAMuC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,4CAAwB,IACvBC,WAAW9B,EAAY,gBAAgB,aAAa+B,QACnD,MAGJ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,4CACCC,WAAW9B,EAAY,gBAAgB,aAAa+B,QACnD,MAGJ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,2CACCC,WAAW9B,EAAY,gBAAgB,YAAY+B,QAClD,MAGJ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,6CAAyB,IACxBC,WAAW9B,EAAY,gBAAgB,cAAc+B,QACpD,MAGJ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,8CACC7B,EAAY,gBAAgB,iBAE/B,eAAC,IAAD,CAAM2B,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,sDACCC,WACC9B,EAAY,gBAAgB,uBAC5B+B,QAAQ,MAEZ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,gDAA4B,IAC3BC,WACC9B,EAAY,gBAAgB,eAC5B+B,QAAQ,MAEZ,eAAC,IAAD,CAAMJ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,UACG,IACD,gDACC7B,EAAY,gBAAgB,4BAG/B,gB,qWC3GVnB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACV0B,MAAO,QAETqB,QAAS,CACPC,SAAUlD,EAAMmD,WAAWC,QAAQ,IACnCC,WAAYrD,EAAMmD,WAAWG,mBAE/BnD,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,UAC1B6C,gBAAiBvD,EAAMQ,QAAQgD,QAAQC,MACvCP,SAAU,SAEZQ,iBAAkB,CAChBR,SAAUlD,EAAMmD,WAAWC,QAAQ,IACnC7C,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BiD,KAAM,CACJC,cAAe,SACfpB,OAAQ,GACRZ,MAAO,IAETiC,QAAS,CACPC,WAAY,SACZP,gBAAiBvD,EAAMQ,QAAQE,UAAU+C,MACzChB,QAAS,OACTsB,cAAe,SACfC,eAAgB,SAChBxB,OAAO,QAETyB,OAAQ,CACNC,UAAW,QAEbC,OAAQ,CACNC,WAAW,aAAD,OAAepE,EAAMQ,QAAQ6D,SACvCjE,QAASJ,EAAMK,QAAQ,EAAG,IAE5BiE,KAAM,CACJ/D,MAAOP,EAAMQ,QAAQgD,QAAQe,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,cAGpBC,UAAW,CAAEjC,OAAQ,MAAOZ,MAAO,MAAOa,QAAS,OAAQC,KAAM,GACjEgC,UAAW,CAAE3C,OAAQ/B,EAAMK,QAAQ,IACnCsE,OAAQ,CAAE5C,OAAQ/B,EAAMK,QAAQ,QA2TnBuE,UAxTC,WACd,IAAMC,EAAOC,cACP5D,EAAUpB,IAFI,EAIMiF,mBAAS,MAJf,mBAIbnE,EAJa,KAINoE,EAJM,OAK0BD,mBAAS,MALnC,mBAKblE,EALa,KAKIoE,EALJ,OAMgBF,mBAAS,MANzB,mBAMbjE,EANa,KAMDoE,EANC,OAO0BH,mBAAS,MAPnC,mBAObhE,EAPa,KAOIoE,EAPJ,OAQUJ,oBAAS,GARnB,mBAQbK,EARa,KAQJC,EARI,OASwBN,mBAAS,sBATjC,mBASbO,EATa,KASGC,EATH,OAUYR,mBAAS,aAVrB,mBAUbS,GAVa,KAUHC,GAVG,QAWYV,mBAAS,IAXrB,qBAWbW,GAXa,MAWHC,GAXG,SAYUZ,mBAAS,IAZnB,qBAYba,GAZa,MAYJC,GAZI,SAakBd,mBAAS,gBAb3B,qBAabe,GAba,MAaAC,GAbA,SAcgChB,mBAClD,0BAfkB,qBAcbiB,GAda,MAcOC,GAdP,MAkBdC,GAASC,uBACb,SAAAC,GACE,IAAMC,EAAS,IAAIC,WACnBjB,GAAW,GAwCXI,GAAY,GAAD,OACNW,EAAa,GAAG1E,KAAK6E,MAAM,KAAK,GAD1B,mBACuCC,OAC7CD,MAAM,KACNE,MAAM,EAAG,GACTC,KAAK,OAEVL,EAAOM,WAAWP,EAAa,IAC/BC,EAAOO,OAAS,WACdC,IAAIC,MAAMT,EAAOU,QAAQ,SAACC,EAAK1F,GAC7B,GAAI0F,EACF,OAAOC,QAAQC,MAAM,qBAAsBF,GAE7CzB,EAAkB,mCAlDA,SAAAjE,GACpB6F,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAElG,KAAMA,MAE5BmG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJf,IAAIC,MAAMc,EAAStG,MAAM,SAAC0F,EAAK1F,GAC7B,GAAK0F,EAoBHC,QAAQC,MAAMF,GACd3B,GAAW,OArBH,CACR,IAAIwC,EAAc,GACdC,EAAY,GACZC,EAAY,GACZC,EAAY,GAChB1G,EAAK2G,QACL3G,EAAK4G,SAAQ,SAAAC,GACPA,IACFN,EAAYO,KAAKD,EAAI,IACrBJ,EAAUK,KAAKrF,WAAWoF,EAAI,IAAInF,QAAQ,IAC1C8E,EAAUM,KAAKrF,WAAWoF,EAAI,IAAInF,QAAQ,IAC1CgF,EAAUI,KAAKrF,WAAWoF,EAAI,IAAInF,QAAQ,QAG9CgC,EAAS6C,GACT3C,EAAc6C,GACd9C,EAAmB6C,GACnB3C,EAAmB6C,GACnB3C,GAAW,UAOhBgD,OAAM,SAAAC,GAAY,OAAIrB,QAAQC,MAAMoB,MAerCC,CAAcjH,SAIpB,CAAC0D,EAAUC,EAAoBC,EAAeC,IA9E5B,GAiFkCqD,YAAY,CAAEtC,YAA5DuC,GAjFY,GAiFZA,aAAcC,GAjFF,GAiFEA,cAAeC,GAjFjB,GAiFiBA,aAyDrCC,qBAAU,WACRzB,MAAM,mCACHM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK9B,MACP,IAiBH,OACE,cAAC,IAAD,CACEkD,UAAWhE,EAAKiE,cAAc,CAC5BC,GAAI,aACJC,eAAgB,aAHpB,SAME,cAAC,IAAD,CAAW7H,UAAWD,EAAQuD,UAA9B,SACE,eAAC,IAAD,CACE9B,WAAS,EACTsG,QAAQ,SACRnF,WAAW,SACX3C,UAAWD,EAAQgI,KACnB7I,QAAS,EALX,UAOIO,EAoBA,qCACE,cAAC,IAAD,CAAMgC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,cAAC,IAAD,CACE3B,UAAWD,EAAQyD,OACnBwE,KAAK,QACL/H,QAAQ,YACRb,MAAM,YACN6I,QAAS,kBAAMC,OAAOC,SAASC,UALjC,qBAUF,cAAC,IAAD,CAAM3G,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,cAAC,IAAD,CAAO3B,UAAWD,EAAQjB,KAA1B,SACE,eAAC,IAAD,CAAWuJ,iBAAiB,EAA5B,UACE,eAAC,IAAD,CACEC,WAAY,cAAC,IAAD,IACZC,gBAAc,kBACdX,GAAG,iBAHL,UAKE,qBAAK5H,UAAWD,EAAQ+C,OAAxB,SACE,cAAC,IAAD,CAAY9C,UAAWD,EAAQ+B,QAA/B,2BAIF,qBAAK9B,UAAWD,EAAQ+C,YAE1B,eAAC,IAAD,CAAkB9C,UAAWD,EAAQ2C,QAArC,UACE,qBAAK1C,UAAWD,EAAQ+C,SACxB,cAAC,IAAD,CACE8E,GAAG,iBACHY,MAAM,eACNC,MAAO9D,GACP+D,SAAU,SAAAC,GAAC,OAAI/D,GAAe+D,EAAEC,OAAOH,UAEzC,uBACA,cAAC,IAAD,CACEb,GAAG,8BACHY,MAAM,mBACNK,WAAS,EACTC,QAAS,EACTL,MAAO5D,GACP6D,SAAU,SAAAC,GAAC,OAAI7D,GAAsB6D,EAAEC,OAAOH,QAC9CxI,QAAQ,gBAGZ,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CACE+H,KAAK,QACL5I,MAAM,UACN6I,QAAS,kBAvIT,WACpB,IAAIc,EAAgB,CAClBtE,QAAS,CACPlE,KAAMoE,GACNqE,YAAanE,GACboE,MAAO,CACLC,UAAU,GAAD,OAAK7E,GAAS8E,WAAWC,cAAzB,mBAAiD/D,OACvDD,MAAM,KACNE,MAAM,EAAG,GACTC,KAAK,MACR8D,aAAc5J,EAAM0J,WACpBG,eAAgB5J,EAAgByJ,WAChCI,gBAAiB5J,EAAWwJ,WAC5BK,WAAY5J,EAAgBuJ,cAIlCnD,MAAM,kCAAmC,CACvCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU0C,KAEpBzC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK4B,OAAOuB,MAAP,UAAgBpF,GAAhB,8BAA8CM,MA8GnB+E,IAHjB,2BAWR,cAAC,IAAD,CAAMjI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,cAAC,IAAD,CAAO3B,UAAWD,EAAQjB,KAA1B,SACE,eAAC,IAAD,CAAWuJ,iBAAiB,EAA5B,UACE,eAAC,IAAD,CACEC,WAAY,cAAC,IAAD,IACZC,gBAAc,kBACdX,GAAG,iBAHL,UAKE,qBAAK5H,UAAWD,EAAQ+C,OAAxB,SACE,cAAC,IAAD,CAAY9C,UAAWD,EAAQ+B,QAA/B,gCAIF,qBAAK9B,UAAWD,EAAQ+C,YAE1B,eAAC,IAAD,CAAkB9C,UAAWD,EAAQ2C,QAArC,UACE,qBAAK1C,UAAWD,EAAQ+C,SACxB,qBAAK9C,UAAWD,EAAQ+C,OAAxB,SA7HXyB,GAASoF,KAAI,SAAAlF,GAClB,OACE,cAAC,IAAD,CACErF,MAAM,UACN4I,KAAK,QACLQ,MAAO/D,EAAQlE,KACfqJ,WAAY,cAAC,IAAD,IACZC,SAAU,kBAAMnF,GAAWD,IAC3BqF,OAAQ,cAAC,IAAD,UAASrF,EAAQmD,eAyHf,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEI,KAAK,QACL5I,MAAM,UACN6I,QAAS,kBApMJ,WACzB,IAAI8B,EAAc,CAChBtF,QAASA,GAAQmD,GACjBsB,UAAU,GAAD,OAAK7E,GAAL,mBAAwBgB,OAC9BD,MAAM,KACNE,MAAM,EAAG,GACTC,KAAK,MACR8D,aAAc5J,EAAM0J,WACpBG,eAAgB5J,EAAgByJ,WAChCI,gBAAiB5J,EAAWwJ,WAC5BK,WAAY5J,EAAgBuJ,YAE9BnD,MAAM,gCAAiC,CACrCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU0D,KAEpBzD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KACC4B,OAAOuB,MAAP,UACKpF,GAASe,MAAM,KAAK,GADzB,8BACiDX,GAAQlE,QA8K1ByJ,IAHjB,8BArGV,mCACI/F,EAeE,KAdF,cAAC,IAAD,CAAMxC,MAAI,EAACwI,GAAI,GAAItH,WAAW,SAA9B,SACE,eAAC,IAAD,2BAAW2E,MAAX,cACE,qCAAWC,OACVC,GACC,cAAC,IAAD,CAAOxH,UAAWD,EAAQf,MAA1B,oCAIA,cAAC,IAAD,CAAOgB,UAAWD,EAAQf,MAA1B,yEAyGZ,eAAC,IAAD,CAAMyC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,UACE,cAAC,IAAD,CAAO3B,UAAWD,EAAQf,MAA1B,SACGS,EACC,cAAC,IAAD,CACEA,MAAOA,EACPC,gBAAiBA,EACjBC,WAAYA,EACZC,gBAAiBA,EACjBC,SAAUwE,GACVvE,YAAa,KAGfqE,IAGHF,EAAU,cAAC,IAAD,CAAUhE,QAAQ,OAAOoB,OAAQ,MAAU","file":"static/js/11.d9260165.chunk.js","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function UserPlotly({\n  xAxis,\n  projectionLower,\n  projection,\n  projectionUpper,\n  stockSym,\n  globalQuote,\n}) {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.paper} variant='outlined' elevation={4}>\n      <Card>\n        <CardActionArea>\n          <Plot\n            data={[\n              {\n                x: xAxis,\n                y: projectionUpper,\n                type: \"lines+markers\",\n                name: \"Projection upper\",\n                line: {\n                  color: \"rgb(0, 255, 0)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projection,\n                type: \"lines+markers\",\n                name: \"Projection\",\n                line: {\n                  color: \"rgb(0, 0, 255)\",\n                  width: 2,\n                },\n              },\n              {\n                x: xAxis,\n                y: projectionLower,\n                type: \"lines+markers\",\n                name: \"Projection lower\",\n                line: {\n                  color: \"rgb(255, 0, 0)\",\n                  width: 2,\n                },\n              },\n            ]}\n            layout={{\n              title: stockSym,\n              margin: { t: 75, l: 40, r: 20, b: 40 },\n              showlegend: false,\n              autosize: true,\n              useResizeHandler: true,\n            }}\n            style={{ width: \"100%\", height: \"100%\", display: \"flex\", flex: 1 }}\n          />\n          <CardContent>\n            {globalQuote[\"Global Quote\"] ? (\n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Open: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"02. open\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>High: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"03. high\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Low: </strong>\n                  {parseFloat(globalQuote[\"Global Quote\"][\"04. low\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Price: </strong>{\" \"}\n                  {parseFloat(globalQuote[\"Global Quote\"][\"05. price\"]).toFixed(\n                    2\n                  )}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Volume: </strong>\n                  {globalQuote[\"Global Quote\"][\"06. volume\"]}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Previous Close: </strong>\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"08. previous close\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change $: </strong>{\" \"}\n                  {parseFloat(\n                    globalQuote[\"Global Quote\"][\"09. change\"]\n                  ).toFixed(2)}\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  {\" \"}\n                  <strong>Change %: </strong>\n                  {globalQuote[\"Global Quote\"][\"10. change percent\"]}\n                </Grid>\n              </Grid>\n            ) : null}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Paper>\n  );\n}\n","import Page from \"material-ui-shell/lib/containers/Page\";\r\nimport React, { useState, useCallback } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Scrollbar from \"material-ui-shell/lib/components/Scrollbar/Scrollbar\";\r\nimport UserPlotly from \"graphs/UserPlotly\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport csv from \"csv\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionActions from \"@material-ui/core/AccordionActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { useEffect } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    backgroundColor: theme.palette.primary.light,\r\n    fontSize: \"2.7em\",\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.secondary.light,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    height: `100%`,\r\n  },\r\n  column: {\r\n    flexBasis: \"100%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  scrollbar: { height: \"70%\", width: \"70%\", display: \"flex\", flex: 1 },\r\n  textField: { margin: theme.spacing(3) },\r\n  button: { margin: theme.spacing(3) },\r\n}));\r\n\r\nconst CsvCast = () => {\r\n  const intl = useIntl();\r\n  const classes = useStyles();\r\n\r\n  const [xAxis, setXAxis] = useState(null);\r\n  const [projectionLower, setProjectionLower] = useState(null);\r\n  const [projection, setProjection] = useState(null);\r\n  const [projectionUpper, setProjectionUpper] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"Your Future Awaits\");\r\n  const [fileName, setFileName] = useState(\"file name\");\r\n  const [projects, setProjects] = useState([]);\r\n  const [project, setProject] = useState({});\r\n  const [projectName, setProjectName] = useState(\"Project Name\");\r\n  const [projectDescription, setProjectDescription] = useState(\r\n    \"Enter Description Here\"\r\n  );\r\n\r\n  const onDrop = useCallback(\r\n    acceptedFile => {\r\n      const reader = new FileReader();\r\n      setLoading(true);\r\n\r\n      const thinkalatorIO = data => {\r\n        fetch(\"https://four-cast-app.herokuapp.com/\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ data: data }),\r\n        })\r\n          .then(response => response.json())\r\n          .then(forecast => {\r\n            csv.parse(forecast.data, (err, data) => {\r\n              if (!err) {\r\n                let xAxisValues = [];\r\n                let projLower = [];\r\n                let projected = [];\r\n                let projUpper = [];\r\n                data.shift();\r\n                data.forEach(row => {\r\n                  if (row) {\r\n                    xAxisValues.push(row[1]);\r\n                    projected.push(parseFloat(row[2]).toFixed(2));\r\n                    projLower.push(parseFloat(row[3]).toFixed(2));\r\n                    projUpper.push(parseFloat(row[4]).toFixed(2));\r\n                  }\r\n                });\r\n                setXAxis(xAxisValues);\r\n                setProjection(projected);\r\n                setProjectionLower(projLower);\r\n                setProjectionUpper(projUpper);\r\n                setLoading(false);\r\n              } else {\r\n                console.error(err);\r\n                setLoading(false);\r\n              }\r\n            });\r\n          })\r\n          .catch(promiseError => console.error(promiseError));\r\n      };\r\n      setFileName(\r\n        `${acceptedFile[0].name.split(\".\")[0]} Casted ${Date()\r\n          .split(\" \")\r\n          .slice(0, 5)\r\n          .join(\" \")}`\r\n      );\r\n      reader.readAsText(acceptedFile[0]);\r\n      reader.onload = () => {\r\n        csv.parse(reader.result, (err, data) => {\r\n          if (err) {\r\n            return console.error(\"Parsed CSV error: \", err);\r\n          }\r\n          setLoadingMessage(\"Waiting on your 90 Day Forecast\");\r\n          thinkalatorIO(data);\r\n        });\r\n      };\r\n    },\r\n    [setXAxis, setProjectionLower, setProjection, setProjectionUpper]\r\n  );\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  const handleSaveExisting = () => {\r\n    let stockObject = {\r\n      project: project.id,\r\n      stock_sym: `${fileName} Casted ${Date()\r\n        .split(\" \")\r\n        .slice(0, 5)\r\n        .join(\" \")}`,\r\n      x_axis_array: xAxis.toString(),\r\n      proj_low_array: projectionLower.toString(),\r\n      proj_high_array: projection.toString(),\r\n      proj_array: projectionUpper.toString(),\r\n    };\r\n    fetch(\"http://localhost:3000/graphs/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(stockObject),\r\n    })\r\n      .then(response => response.json())\r\n      .then(\r\n        window.alert(\r\n          `${fileName.split(\" \")[0]} has been saved to ${project.name}`\r\n        )\r\n      );\r\n  };\r\n\r\n  const handleSaveNew = () => {\r\n    let projectObject = {\r\n      project: {\r\n        name: projectName,\r\n        description: projectDescription,\r\n        graph: {\r\n          stock_sym: `${fileName.toString().toUpperCase()} Casted ${Date()\r\n            .split(\" \")\r\n            .slice(0, 5)\r\n            .join(\" \")}`,\r\n          x_axis_array: xAxis.toString(),\r\n          proj_low_array: projectionLower.toString(),\r\n          proj_high_array: projection.toString(),\r\n          proj_array: projectionUpper.toString(),\r\n        },\r\n      },\r\n    };\r\n    fetch(\"http://localhost:3000/projects/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(projectObject),\r\n    })\r\n      .then(response => response.json())\r\n      .then(window.alert(`${fileName} has been saved to ${projectName}`));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:3000/projects/\")\r\n      .then(response => response.json())\r\n      .then(setProjects);\r\n  }, []);\r\n\r\n  const renderProjectChips = () => {\r\n    return projects.map(project => {\r\n      return (\r\n        <Chip\r\n          color='primary'\r\n          size='small'\r\n          label={project.name}\r\n          deleteIcon={<DoneIcon />}\r\n          onDelete={() => setProject(project)}\r\n          avatar={<Avatar>{project.id}</Avatar>}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page\r\n      pageTitle={intl.formatMessage({\r\n        id: \"stock_cast\",\r\n        defaultMessage: \"Cast CSV\",\r\n      })}\r\n    >\r\n      <Scrollbar className={classes.scrollbar}>\r\n        <Grid\r\n          container\r\n          justify='center'\r\n          alignItems='center'\r\n          className={classes.grid}\r\n          spacing={0}\r\n        >\r\n          {!xAxis ? (\r\n            <>\r\n              {!loading ? (\r\n                <Grid item lg={12} alignItems='center'>\r\n                  <Paper {...getRootProps()}>\r\n                    <input {...getInputProps()} />\r\n                    {isDragActive ? (\r\n                      <Paper className={classes.paper}>\r\n                        Drop the file here ...\r\n                      </Paper>\r\n                    ) : (\r\n                      <Paper className={classes.paper}>\r\n                        Drag and Drop a CSV here...or Click to Select File.\r\n                      </Paper>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n              ) : null}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Grid item xs={2} sm={2}>\r\n                <Button\r\n                  className={classes.button}\r\n                  size='large'\r\n                  variant='contained'\r\n                  color='secondary'\r\n                  onClick={() => window.location.reload()}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4} sm={4}>\r\n                <Paper className={classes.root}>\r\n                  <Accordion defaultExpanded={false}>\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls='panel1c-content'\r\n                      id='panel1c-header'\r\n                    >\r\n                      <div className={classes.column}>\r\n                        <Typography className={classes.heading}>\r\n                          Save to New\r\n                        </Typography>\r\n                      </div>\r\n                      <div className={classes.column}></div>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.details}>\r\n                      <div className={classes.column} />\r\n                      <TextField\r\n                        id='standard-basic'\r\n                        label='Name Project'\r\n                        value={projectName}\r\n                        onChange={e => setProjectName(e.target.value)}\r\n                      />\r\n                      <br></br>\r\n                      <TextField\r\n                        id='outlined-multiline-flexible'\r\n                        label='Describe Project'\r\n                        multiline\r\n                        rowsMax={4}\r\n                        value={projectDescription}\r\n                        onChange={e => setProjectDescription(e.target.value)}\r\n                        variant='outlined'\r\n                      />\r\n                    </AccordionDetails>\r\n                    <Divider />\r\n                    <AccordionActions>\r\n                      <Button\r\n                        size='small'\r\n                        color='primary'\r\n                        onClick={() => handleSaveNew()}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </AccordionActions>\r\n                  </Accordion>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={4} sm={4}>\r\n                <Paper className={classes.root}>\r\n                  <Accordion defaultExpanded={false}>\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls='panel1c-content'\r\n                      id='panel1c-header'\r\n                    >\r\n                      <div className={classes.column}>\r\n                        <Typography className={classes.heading}>\r\n                          Save to Existing\r\n                        </Typography>\r\n                      </div>\r\n                      <div className={classes.column}></div>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.details}>\r\n                      <div className={classes.column} />\r\n                      <div className={classes.column}>\r\n                        {renderProjectChips()}\r\n                      </div>\r\n                    </AccordionDetails>\r\n                    <Divider />\r\n                    <AccordionActions>\r\n                      <Button\r\n                        size='small'\r\n                        color='primary'\r\n                        onClick={() => handleSaveExisting()}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </AccordionActions>\r\n                  </Accordion>\r\n                </Paper>\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid item xs={12} sm={12}>\r\n            <Paper className={classes.paper}>\r\n              {xAxis ? (\r\n                <UserPlotly\r\n                  xAxis={xAxis}\r\n                  projectionLower={projectionLower}\r\n                  projection={projection}\r\n                  projectionUpper={projectionUpper}\r\n                  stockSym={fileName}\r\n                  globalQuote={{}}\r\n                />\r\n              ) : (\r\n                loadingMessage\r\n              )}\r\n            </Paper>\r\n            {loading ? <Skeleton variant='rect' height={500} /> : null}\r\n          </Grid>\r\n        </Grid>\r\n      </Scrollbar>\r\n    </Page>\r\n  );\r\n};\r\nexport default CsvCast;\r\n"],"sourceRoot":""}